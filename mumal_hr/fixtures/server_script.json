[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:26.988743",
  "module": "Mumal HR",
  "name": "Not Allowed to create Job Opening on InActive Staffing Plan",
  "reference_doctype": "Job Opening",
  "script": "if doc.staffing_plan:\n    staffing_plan = frappe.get_doc('Staffing Plan', doc.staffing_plan)\n    if staffing_plan.custom_enable == 0:\n        frappe.throw(f'{doc.staffing_plan} Staffing Plan is closed.')\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:27.010507",
  "module": "Mumal HR",
  "name": "Not allowed to Create/Update Job Offer against 'Closed' Job Opening",
  "reference_doctype": "Job Offer",
  "script": "if doc.custom__job_opening_:\n    job_opening_doc = frappe.get_doc('Job Opening', doc.custom__job_opening_)\n    if job_opening_doc.status == 'Closed':\n        frappe.throw(f'{doc.custom__job_opening_} Job Opening is closed.')\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:27.286123",
  "module": "Mumal HR",
  "name": "Auto update job opening status as 'Closed' based on the hired vacancy",
  "reference_doctype": "Job Offer",
  "script": "if doc.status == 'Accepted':\n    opening = doc.custom_job_opening\n    \n    # job_requisition = frappe.db.get_value('Job Opening', opening, 'job_requisition')\n    \n    # if job_requisition:\n    \n    #     vacancy = frappe.db.get_value('Job Opening', opening, 'vacancies')\n    job_requisition = frappe.db.get_value('Job Opening', opening, 'job_requisition')\n    vacancy_field = 'vacancies' if job_requisition else 'planned_vacancies'\n    \n    vacancy = frappe.db.get_value('Job Opening', opening, vacancy_field)\n    staffing_plan = frappe.db.get_value('Job Opening', opening, 'staffing_plan')\n    \n    hired_vacancy = frappe.db.count('Job Offer', {'docstatus':1, 'status': 'Accepted', 'custom_job_opening': opening})\n        \n    frappe.db.set_value('Job Opening', opening, 'custom_hired_vacancy', hired_vacancy)\n        \n    if vacancy==hired_vacancy:\n            \n        # closing_date = frappe.utils.today()\n        frappe.db.set_value('Job Opening', opening, 'status', 'Closed')\n        frappe.db.set_value('Job Opening', opening, 'publish', 0)\n        # frappe.db.set_value('Job Opening', opening, 'closed_on', closing_date)\n            \n        \n        \n    # Check status of job opening of particular staffing plan\n    data = frappe.db.get_list('Job Opening',\n    filters={\n        'staffing_plan': staffing_plan,\n    },\n    fields=['name', 'status'], as_list=True)\n    \n    # Initialize a flag to track if all job openings are closed\n    all_closed = True\n        \n    # Iterate through the job openings\n    for x in data:\n        name = x[0]\n        status = x[1]\n            \n           \n            \n        # If any job opening is not closed, set the flag to False\n        if status != 'Closed':\n            all_closed = False\n        \n    # If all job openings are closed, print a message\n    if all_closed:\n            \n        frappe.db.set_value('Staffing Plan', staffing_plan, 'custom_enable', 0)\n    else:\n        pass\n            # frappe.msgprint(\"Not all job openings for the staffing plan are closed.\")\n            \n    # else: \n    #     vacancy = frappe.db.get_value('Job Opening', opening, 'planned_vacancies')\n    #     staffing_plan = frappe.db.get_value('Job Opening', opening, 'staffing_plan')\n        \n    #     hired_vacancy = frappe.db.count('Job Offer', {'docstatus':1, 'status': 'Accepted', 'custom__job_opening_': opening})\n        \n    #     frappe.db.set_value('Job Opening', opening, 'custom_hired_vacancy', hired_vacancy)\n        \n    #     if vacancy==hired_vacancy:\n            \n    #         # closing_date = frappe.utils.today()\n    #         frappe.db.set_value('Job Opening', opening, 'status', 'Closed')\n    #         # frappe.db.set_value('Job Opening', opening, 'closed_on', closing_date)\n            \n        \n        \n    #     # Check status of job opening of particular staffing plan\n    #     data = frappe.db.get_list('Job Opening',\n    #     filters={\n    #         'staffing_plan': staffing_plan,\n    #     },\n    #     fields=['name', 'status'], as_list=True)\n    \n    #     # Initialize a flag to track if all job openings are closed\n    #     all_closed = True\n        \n    #     # Iterate through the job openings\n    #     for x in data:\n    #         name = x[0]\n    #         status = x[1]\n            \n           \n            \n    #         # If any job opening is not closed, set the flag to False\n    #         if status != 'Closed':\n    #             all_closed = False\n        \n    #     # If all job openings are closed, print a message\n    #     if all_closed:\n            \n    #         frappe.db.set_value('Staffing Plan', staffing_plan, 'custom_enable', 0)\n    #     else:\n    #         pass\n\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:27.269234",
  "module": "Mumal HR",
  "name": "Update Hired vacancy in Job Opening when job offer is cancelled",
  "reference_doctype": "Job Offer",
  "script": "general_round = frappe.db.exists(\"Interview\", {\"job_applicant\": doc.job_applicant, \"custom_round_type\":\"General Round\", \"docstatus\": [\"!=\", 2]})\nthird_interview = frappe.db.exists(\"Interview\", {\"job_applicant\": doc.job_applicant, \"custom_round_type\":\"3rd Interview Round\", \"docstatus\": [\"!=\", 2]})\nsecond_interview = frappe.db.exists(\"Interview\", {\"job_applicant\": doc.job_applicant, \"custom_round_type\":\"2nd Interview Round\", \"docstatus\": [\"!=\", 2]})\nfirst_interview = frappe.db.exists(\"Interview\", {\"job_applicant\": doc.job_applicant, \"custom_round_type\":\"1st Interview Round\", \"docstatus\": [\"!=\", 2]})\n\nif general_round:\n    prev_status = frappe.db.get_value('Interview',general_round,['status'])\n    prev_round = frappe.db.get_value('Interview',general_round,['interview_round'])\n    prev_status_string = f\"{prev_round} - {prev_status}\"\n    \n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', prev_status_string)\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', prev_round)\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_status', prev_status)\n    \nelif third_interview:\n    prev_status = frappe.db.get_value('Interview',third_interview,['status'])\n    prev_round = frappe.db.get_value('Interview',third_interview,['interview_round'])\n    prev_status_string = f\"{prev_round} - {prev_status}\"\n    \n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', prev_status_string)\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', prev_round)\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_status', prev_status)\n    \nelif second_interview:\n    prev_status = frappe.db.get_value('Interview',second_interview,['status'])\n    prev_round = frappe.db.get_value('Interview',second_interview,['interview_round'])\n    prev_status_string = f\"{prev_round} - {prev_status}\"\n    \n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', prev_status_string)\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', prev_round)\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_status', prev_status)\n\nelif first_interview:\n    prev_status = frappe.db.get_value('Interview',first_interview,['status'])\n    prev_round = frappe.db.get_value('Interview',first_interview,['interview_round'])\n    prev_status_string = f\"{prev_round} - {prev_status}\"\n    \n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', prev_status_string)\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', prev_round)\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_status', prev_status) \n\nelse:\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', \"Open\")\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', \"Open\")\n\n\nif doc.status=='Accepted':\n    opening = doc.custom_job_opening\n    vacancy = frappe.db.get_value('Job Opening', opening, 'custom_hired_vacancy')\n    plan = frappe.db.get_value('Job Opening', opening, 'staffing_plan')\n    \n    new_vacancy = int(vacancy)-1\n    \n    frappe.db.set_value('Job Opening', opening, 'custom_hired_vacancy', new_vacancy)\n    frappe.db.set_value('Job Opening', opening, 'status', 'Open')\n    \n    frappe.db.set_value('Staffing Plan', plan, 'custom_enable', 1)\n    \n    \n\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:27.038951",
  "module": "Mumal HR",
  "name": "Not allowed to Create/Update interview against 'Closed' Job Opening",
  "reference_doctype": "Interview",
  "script": "if doc.job_opening:\n    job_opening_doc = frappe.get_doc('Job Opening', doc.job_opening)\n    if job_opening_doc.status == 'Closed':\n        frappe.throw(f'{doc.job_opening} Job Opening is closed.')\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:27.074227",
  "module": "Mumal HR",
  "name": "set applicant status based on job offer",
  "reference_doctype": "Job Offer",
  "script": "if doc.status == \"Awaiting Response\":\n    frappe.throw(\"Only Accepted or Rejected job offer can be submitted.\");",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:27.100919",
  "module": "Mumal HR",
  "name": "Update Job applicant status When interview is saved",
  "reference_doctype": "Interview",
  "script": "status = doc.status\ninterview_round = doc.interview_round\njob_applicant = doc.job_applicant\n\n\nif status in ['Pending', 'Under Review', 'Not Appeared']:\n    \n    status_string = f\"{interview_round} - {status}\"\n        \n    frappe.db.set_value('Job Applicant', job_applicant, 'status', status_string)\n    frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_round', interview_round)\n    frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_status', status)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:27.130556",
  "module": "Mumal HR",
  "name": "Update Job applicant status When interview is submitted",
  "reference_doctype": "Interview",
  "script": "status = doc.status\ninterview_round = doc.interview_round\njob_applicant = doc.job_applicant\n\n\nif status in ['Cleared', 'Rejected']:\n    \n    status_string = f\"{interview_round} - {status}\"\n    \n    frappe.db.set_value('Job Applicant', job_applicant, 'status', status_string)\n    frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_round', interview_round)\n    frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_status', status)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:27.193533",
  "module": "Mumal HR",
  "name": "Change job applicant status when interview is cancelled",
  "reference_doctype": "Interview",
  "script": "if doc.custom_round_type in ['General Round', '1st Interview Round']:\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', \"Open\")\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', \"Open\")\n    \nelif doc.custom_round_type==\"3rd Interview Round\":\n    second_interview = frappe.db.exists(\"Interview\", {\"job_applicant\": doc.job_applicant, \"custom_round_type\":\"2nd Interview Round\", \"docstatus\": [\"!=\", 2]})\n    \n    if second_interview:\n        job_applicant = frappe.db.get_value('Interview',second_interview,['job_applicant'])\n        prev_status = frappe.db.get_value('Interview',second_interview,['status'])\n        prev_round = frappe.db.get_value('Interview',second_interview,['interview_round'])\n        \n        prev_status_string = f\"{prev_round} - {prev_status}\"\n        \n        frappe.db.set_value('Job Applicant', job_applicant, 'status', prev_status_string)\n        frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_round', prev_round)\n        frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_status', prev_status)\n    else:\n        frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', \"Open\")\n        frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', \"Open\")\n        \n        \nelif doc.custom_round_type==\"2nd Interview Round\":\n    first_interiew = frappe.db.exists(\"Interview\", {\"job_applicant\": doc.job_applicant, \"custom_round_type\":\"1st Interview Round\", \"docstatus\": [\"!=\", 2]})\n    \n    if first_interiew:\n        job_applicant = frappe.db.get_value('Interview',first_interiew,['job_applicant'])\n        prev_status = frappe.db.get_value('Interview',first_interiew,['status'])\n        prev_round = frappe.db.get_value('Interview',first_interiew,['interview_round'])\n        \n        prev_status_string = f\"{prev_round} - {prev_status}\"\n        \n        frappe.db.set_value('Job Applicant', job_applicant, 'status', prev_status_string)\n        frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_round', prev_round)\n        frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_status', prev_status)\n    else:\n        frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', \"Open\")\n        frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', \"Open\")\n        \n    \n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Delete",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:27.163325",
  "module": "Mumal HR",
  "name": "Change Job Applicant status when interview is deleted",
  "reference_doctype": "Interview",
  "script": "if doc.docstatus!=2:\n    \n    if doc.custom_round_type in ['General Round', '1st Interview Round']:\n        frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', \"Open\")\n        frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', \"Open\")\n        \n    elif doc.custom_round_type==\"3rd Interview Round\":\n        second_interview = frappe.db.exists(\"Interview\", {\"job_applicant\": doc.job_applicant, \"custom_round_type\":\"2nd Interview Round\", \"docstatus\": [\"!=\", 2]})\n        \n        if second_interview:\n            job_applicant = frappe.db.get_value('Interview',second_interview,['job_applicant'])\n            prev_status = frappe.db.get_value('Interview',second_interview,['status'])\n            prev_round = frappe.db.get_value('Interview',second_interview,['interview_round'])\n            \n            prev_status_string = f\"{prev_round} - {prev_status}\"\n            \n            frappe.db.set_value('Job Applicant', job_applicant, 'status', prev_status_string)\n            frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_round', prev_round)\n            frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_status', prev_status)\n        else:\n            frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', \"Open\")\n            frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', \"Open\")\n            \n            \n    elif doc.custom_round_type==\"2nd Interview Round\":\n        first_interiew = frappe.db.exists(\"Interview\", {\"job_applicant\": doc.job_applicant, \"custom_round_type\":\"1st Interview Round\", \"docstatus\": [\"!=\", 2]})\n        \n        if first_interiew:\n            job_applicant = frappe.db.get_value('Interview',first_interiew,['job_applicant'])\n            prev_status = frappe.db.get_value('Interview',first_interiew,['status'])\n            prev_round = frappe.db.get_value('Interview',first_interiew,['interview_round'])\n            \n            prev_status_string = f\"{prev_round} - {prev_status}\"\n            \n            frappe.db.set_value('Job Applicant', job_applicant, 'status', prev_status_string)\n            frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_round', prev_round)\n            frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_status', prev_status) \n        else:\n            frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', \"Open\")\n            frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', \"Open\")\n            \n        \n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:27.220721",
  "module": "Mumal HR",
  "name": "Do not allow to create job offer against closed - job opening",
  "reference_doctype": "Job Offer",
  "script": "opening = doc.custom_job_opening\n\nopening_status = frappe.db.get_value('Job Opening', opening, 'status')\n\nif opening_status=='Closed':\n    opening_link = frappe.utils.get_link_to_form(\"Job Opening\", opening)\n    error_message = 'Job Opening is already closed: ' + opening_link\n    frappe.throw(error_message)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:27.255020",
  "module": "Mumal HR",
  "name": "Job Applicant status update on job offer",
  "reference_doctype": "Job Offer",
  "script": "if doc.status == \"Accepted\" or doc.status == \"Rejected\":\n    \n    offer_status = f\"Job Offer - {doc.status}\"\n    \n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', doc.doctype)\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_status', doc.status)\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', offer_status)\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:27.240016",
  "module": "Mumal HR",
  "name": "Update job applicant status when job offer is saved",
  "reference_doctype": "Job Offer",
  "script": "if doc.status=='Awaiting Response':\n    offer_status = f\"{doc.doctype} - {doc.status}\"\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', offer_status)\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', doc.doctype)\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_status', doc.status)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:27.303117",
  "module": "Mumal HR",
  "name": "Relieving date validation on Exit Questionnaire",
  "reference_doctype": "Exit Questionnaire",
  "script": "emp = doc.employee\nemp_nm = doc.employee_name\n\nrelieving_date = frappe.db.get_value('Employee', emp, 'relieving_date')\n\nif emp and not relieving_date:\n    frappe.throw(f\"Please set relieving date in Employee: {emp} - {emp_nm}\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:27.319289",
  "module": "Mumal HR",
  "name": "Update exit questionnaire id in exit interview",
  "reference_doctype": "Exit Questionnaire",
  "script": "exit_interview = frappe.db.get_value('Exit Interview', {'employee': doc.employee}, 'name')\n\nif exit_interview:\n    frappe.db.set_value('Exit Interview', exit_interview, 'reference_document_name', doc.name)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:26.813009",
  "module": "Mumal HR",
  "name": "Update Salary Breakup in Employee Master",
  "reference_doctype": "Salary Structure Assignment",
  "script": "emp = doc.employee\ngross = doc.base\n\nfrappe.db.set_value('Employee', emp, 'custom_salary_structure_assignment', doc.name)\nfrappe.db.set_value('Employee', emp, 'custom_salary_structure', doc.salary_structure)\nfrappe.db.set_value('Employee', emp, 'custom_gross_salary_per_month', gross)\n\n# Fetch all salary components and their formulas\nsalary_components = frappe.get_all(\"Salary Detail\", filters={\"parent\": doc.salary_structure}, fields=['salary_component', 'formula'], order_by=\"idx Asc\")\n\n# Dictionary to store values of different variables\nvariables = {\n    'base': gross,\n    'employee': emp,\n    # Add more variables as needed\n}\n\n# Evaluate each formula and print the result\nfor component in salary_components:\n    component_name = component.salary_component\n    component_formula = component.formula\n    \n    # Substitute variables in the formula\n    try:\n        # Prepare the formula for evaluation by replacing variable names with their values\n        for var_name, var_value in variables.items():\n            component_formula = component_formula.replace(var_name, str(var_value))\n        \n        # Evaluate the formula\n        evaluated_value = eval(component_formula)\n        \n        # Display the component name and evaluated value\n        frappe.msgprint(f\"{component_name}: {evaluated_value}\")\n    \n    except Exception as e:\n        frappe.msgprint(f\"Error evaluating formula for {component_name}: {e}\")\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:27.357498",
  "module": "Mumal HR",
  "name": "Clear Salary Breakup when salary structure assignment is cancelled",
  "reference_doctype": "Salary Structure Assignment",
  "script": "emp = doc.employee\ncur_assignment = doc.name\n\nemployee = frappe.get_doc(\"Employee\", emp)\nemp_assignment = employee.custom_salary_structure_assignment\n\nif cur_assignment == emp_assignment:\n\temployee.custom_salary_structure_assignment = \"\"\n\temployee.custom_salary_structure = \"\"\n\temployee.custom_gross_salary_per_month = \"\"\n\temployee.get(\"custom_earnings\").clear()\n\temployee.get(\"custom_deductions\").clear()\n\temployee.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2025-02-27 16:59:18.727703",
  "module": "Mumal HR",
  "name": "Create SSA Record after increment",
  "reference_doctype": "Employee Increment",
  "script": "employee = doc.employee\nnew_gross = doc.new_gross\napplicable_date = doc.applicable_from\ntoday_date = frappe.utils.today()\n\nif applicable_date == today_date:\n    salary_structure = frappe.db.get_value(\n        'Salary Structure Assignment',\n        filters={'employee': employee},\n        fieldname='salary_structure',\n        order_by='creation desc'\n    )\n\n    new_assignment = frappe.get_doc({\n        'doctype': 'Salary Structure Assignment',\n        'employee': employee,\n        'salary_structure': salary_structure,\n        'from_date': applicable_date,\n        'base': new_gross\n    })\n    new_assignment.insert(ignore_permissions=True)\n    new_assignment.submit()\nelse:\n    pass\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2025-02-27 17:00:23.041912",
  "module": "Mumal HR",
  "name": "Restrict while selecting previous date",
  "reference_doctype": "Employee Increment",
  "script": "applicable_date = doc.applicable_from\ntoday_date = frappe.utils.today()\n\nif applicable_date < today_date:\n    frappe.throw(\"Please select the future date for applicable increment\")\nelse:\n    pass\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:26.935096",
  "module": "Mumal HR",
  "name": "Get Total Days",
  "reference_doctype": "Employee Bonus",
  "script": "# Fetch employee, from_date, and to_date from Employee Bonus entry\remployee = doc.employee\rfrom_date = doc.from_date\rto_date = doc.to_date\r\rif employee and from_date and to_date:\r    # Fetch the Salary Slips of the selected employee that fall within the date range and are submitted\r    salary_slips = frappe.get_all(\r        \"Salary Slip\",\r        filters={\r            \"employee\": employee,\r            \"start_date\": [\">=\", from_date],  # Start date should be on or after the from_date\r            \"end_date\": [\"<=\", to_date],      # End date should be on or before the to_date\r            \"docstatus\": 1                    # Only consider submitted Salary Slips\r        },\r        fields=[\"payment_days\"]\r    )\r    \r    # Calculate the total payment days by summing up the payment_days from all fetched Salary Slips\r    total_payment_days = sum(slip.get(\"payment_days\", 0) for slip in salary_slips)\r    \r    # Set the 'total_days' field in the Employee Bonus doctype with the calculated total_payment_days\r    doc.total_days = total_payment_days\r",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2024-09-30 13:01:29.485963",
  "module": "Mumal HR",
  "name": "Set checkin date",
  "reference_doctype": "Employee Checkin",
  "script": "# if doc.time:\n#     date = frappe.utils.getdate(doc.time,'%d-%m-%Y')\n#     frappe.msgprint(str(date))\n#     doc.custom_date = date\n\n\nformatted_time = frappe.utils.formatdate(doc.time, \"yyyy-mm-dd\") + doc.time[10:]\ndate_time = frappe.utils.get_datetime(formatted_time)\ndoc.custom_date = date_time.date()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-09-30 08:22:27.420159",
  "module": "Mumal HR",
  "name": "Get Overtime",
  "reference_doctype": "Attendance",
  "script": "in_time = str(doc.in_time)\nout_time = str(doc.out_time)\nshift_name = doc.shift\nattendance_name = doc.name\n# frappe.msgprint(in_time)\n# frappe.msgprint(out_time)\n# frappe.msgprint(shift_name)\n# frappe.msgprint(attendance_name)\n\n# For splitting time from in_time and out_time\ntry:\n    new_in_time=in_time.split(\" \")[1:][0]\nexcept IndexError:\n    new_in_time = ''\n    \n    \ntry:\n    new_out_time=out_time.split(\" \")[1:][0]\nexcept IndexError:\n    new_out_time = ''\n    \n    \n# For getting shift hours\nshift_Hour = frappe.db.get_value('Shift Type', shift_name, ['custom_shift_hours'])\nshift_Hour_Str = str(shift_Hour)\nhalf_day_hour = frappe.db.get_value('Shift Type', shift_name, ['working_hours_threshold_for_half_day'])\n# frappe.msgprint(shift_Hour_Str)\n\n#For calculation of Overtime\nif new_in_time and new_out_time:\n    \n    \n    WorkHours = frappe.utils.time_diff(new_out_time, new_in_time)\n    WorkHours_Str = str(WorkHours)\n    # frappe.msgprint(WorkHours_Str)\n    final_wh_new = frappe.utils.format_time(WorkHours_Str,'H.m')\n    # frappe.msgprint(str(final_wh_new))\n    frappe.db.set_value('Attendance', attendance_name, 'custom_work_hours', final_wh_new)\n    \n    if float(final_wh_new) < half_day_hour:\n        frappe.db.set_value('Attendance', attendance_name, 'status', 'Half Day')\n        \n    if WorkHours > shift_Hour:\n        diff = frappe.utils.time_diff(WorkHours_Str, shift_Hour_Str)\n        final_OT = frappe.utils.format_time(diff,'H.m')\n        # frappe.msgprint(str(diff))\n        # frappe.msgprint(str(final_OT))\n        frappe.db.set_value('Attendance', attendance_name, 'custom_overtime', final_OT)\n        \n        ",
  "script_type": "DocType Event"
 }
]